{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>pymmcore-widgets is a library of PyQt/PySide widgets that can be used in combination with pymmcore-plus (github) to build custom user interfaces for Micro-Manager in a python/C++ environment.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install pymmcore-widgets\n</code></pre> <p>Important</p> <p>This package does NOT include a PyQt/PySide backend, you must install one yourself (e.g. <code>pip install PyQt5</code>).</p> <p>Note</p> <p>Widgets are tested on:</p> <ul> <li><code>macOS &amp; Windows</code></li> <li><code>Python 3.8, 3.9 &amp; 3.10</code></li> <li><code>PyQt5 &amp; PyQt6</code></li> <li><code>PySide2 &amp; PySide6</code></li> </ul>"},{"location":"#widgets","title":"Widgets","text":"Widget Description CameraRoiWidget A Widget to control the camera device ROI. ChannelGroupWidget A QComboBox to follow and control Micro-Manager ChannelGroup. ChannelTable Widget providing options for setting up a multi-channel acquisition. ChannelWidget A QComboBox to select which micromanager channel configuration to use. ConfigurationWidget A Widget to select and load a micromanager system configuration. DefaultCameraExposureWidget A Widget to get/set exposure on the default camera. DeviceWidget A general Device Widget. ExposureWidget A Widget to get/set exposure on a camera. GridWidget A subwidget to setup the acquisition of a grid of images. GroupPresetTableWidget A Widget to create, edit, delete and set micromanager group presets. ImagePreview A Widget that displays the last image snapped by active core. LiveButton A Widget to create a two-state (on-off) live mode QPushButton. MDAWidget A Multi-dimensional acquisition Widget. ObjectivesWidget A QComboBox-based Widget to select the microscope objective. PixelSizeWidget A widget for pixel size control. PositionTable Widget providing options for setting up a multi-position acquisition. PresetsWidget A Widget to create a QCombobox containing the presets of the specified group. PropertiesWidget Convenience container to control a specific set of PropertyWidgets. PropertyBrowser A Widget to browse and change properties of all devices. PropertyWidget A widget to display and control a specified mmcore device property. ShuttersWidget A Widget for shutters and Micro-Manager autoshutter. SnapButton Create a snap QPushButton. StageWidget A Widget to control a XY and/or a Z stage. StateDeviceWidget A Widget with a QComboBox to control the states of a StateDevice. TimePlanWidget Widget providing options for setting up a timelapse acquisition. ZStackWidget Widget providing options for setting up a z-stack range and step size."},{"location":"#usage","title":"Usage","text":"<p>For a pre-made user interface, see napari-micromanager (github).</p> <p>Detailed description and usage of each Widget is explained in their respective pages.</p>"},{"location":"widgets/CameraRoiWidget/","title":"CameraRoiWidget","text":"This image generated from example code below."},{"location":"widgets/CameraRoiWidget/#pymmcore_widgets.CameraRoiWidget","title":"<code>CameraRoiWidget</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>A Widget to control the camera device ROI.</p> <p>When the ROI changes, the <code>roiChanged</code> Signal is emitted with the current ROI (x, y, width, height, comboBoxText)</p> <p>[<code>pymmcore_plus.CMMCoreSignaler</code>]</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget, by default None</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/CameraRoiWidget/#example","title":"Example","text":"camera_roi_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import CameraRoiWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\ncam_roi_wdg = CameraRoiWidget()\ncam_roi_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ChannelGroupWidget/","title":"ChannelGroupWidget","text":"This image generated from example code below."},{"location":"widgets/ChannelGroupWidget/#pymmcore_widgets.ChannelGroupWidget","title":"<code>ChannelGroupWidget</code>","text":"<p>             Bases: <code>QComboBox</code></p> <p>A QComboBox to follow and control Micro-Manager ChannelGroup.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/ChannelGroupWidget/#example","title":"Example","text":"channel_group_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ChannelGroupWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nch_group_wdg = ChannelGroupWidget()\nch_group_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ChannelTable/","title":"ChannelTable","text":"This image generated from example code below."},{"location":"widgets/ChannelTable/#pymmcore_widgets.ChannelTable","title":"<code>ChannelTable</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>Widget providing options for setting up a multi-channel acquisition.</p> <p>The <code>value()</code> method returns a dictionary with the current state of the widget, in a format that matches one of the useq-schema Channel specifications.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>channel_group</code> <code>str | None</code> <p>Optional channel group that will be set as the widget's initial ChannelGroup. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/ChannelTable/#pymmcore_widgets._mda._channel_table_widget.ChannelTable.clear","title":"<code>clear() -&gt; None</code>","text":"<p>Clear the channel table.</p>"},{"location":"widgets/ChannelTable/#pymmcore_widgets._mda._channel_table_widget.ChannelTable.set_state","title":"<code>set_state(channels: list[dict]) -&gt; None</code>","text":"<p>Set the state of the widget.</p> <p>Parameters:</p> Name Type Description Default <code>channels</code> <code>list[dict]</code> <p>A list of dictionaries following the useq-schema Channel specifications.</p> required"},{"location":"widgets/ChannelTable/#pymmcore_widgets._mda._channel_table_widget.ChannelTable.value","title":"<code>value() -&gt; list[ChannelDict]</code>","text":"<p>Return the current channels settings as a list of dictionaries.</p> <p>Note that the output will match the useq-schema Channel specifications.</p>"},{"location":"widgets/ChannelTable/#example","title":"Example","text":"channel_table.py<pre><code>\"\"\"Example usage of the ChannelTable class.\n\nCheck also the 'mda_widget.py' example to see the ChannelTable\nused in combination of other widgets.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ChannelTable\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nch_table_wdg = ChannelTable()\nch_table_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ChannelWidget/","title":"ChannelWidget","text":"This image generated from example code below."},{"location":"widgets/ChannelWidget/#pymmcore_widgets.ChannelWidget","title":"<code>ChannelWidget</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>A QComboBox to select which micromanager channel configuration to use.</p> <p>Parameters:</p> Name Type Description Default <code>channel_group</code> <code>str | None</code> <p>Name of the micromanager group defining the microscope channels. By default, it will be guessed using the <code>CMMCorePlus.getOrGuessChannelGroup</code> method and a choice dialog will be presented if there are multiple options. This method looks for a group configuration name matching the default regex <code>re.compile(\"(chan{1,2}(el)?|filt(er)?)s?\", re.IGNORECASE)</code>. A different string/regex can be set using the <code>CMMCorePlus.channelGroup_pattern</code> method.</p> <code>None</code> <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code> <p>Examples:</p> <p>Combining <code>ChannelWidget</code> with other widgets</p> <p>see ImagePreview</p>"},{"location":"widgets/ChannelWidget/#example","title":"Example","text":"channel_widget.py<pre><code>\"\"\"Example usage of the ChannelWidget class.\n\nCheck also the 'image_widget.py' example to see the ChannelWidget\nused in combination of other widgets.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ChannelWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nch_wdg = ChannelWidget()\nch_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ConfigurationWidget/","title":"ConfigurationWidget","text":"This image generated from example code below."},{"location":"widgets/ConfigurationWidget/#pymmcore_widgets.ConfigurationWidget","title":"<code>ConfigurationWidget</code>","text":"<p>             Bases: <code>QGroupBox</code></p> <p>A Widget to select and load a micromanager system configuration.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/ConfigurationWidget/#example","title":"Example","text":"configuration_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ConfigurationWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\ncfg_wdg = ConfigurationWidget()\ncfg_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/DefaultCameraExposureWidget/","title":"DefaultCameraExposureWidget","text":"This image generated from example code below."},{"location":"widgets/DefaultCameraExposureWidget/#pymmcore_widgets.DefaultCameraExposureWidget","title":"<code>DefaultCameraExposureWidget</code>","text":"<p>             Bases: <code>ExposureWidget</code></p> <p>A Widget to get/set exposure on the default camera.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <pre><code>Optional parent widget. By default, None.\n</code></pre> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/DefaultCameraExposureWidget/#pymmcore_widgets._exposure_widget.DefaultCameraExposureWidget.setCamera","title":"<code>setCamera(camera: str | None = None, force: bool = False) -&gt; None</code>","text":"<p>Set which camera this widget tracks.</p> <p>Using this on the <code>DefaultCameraExposureWidget</code>widget may cause unexpected behavior, instead try to use an <code>ExposureWidget</code>.</p> <p>Parameters:</p> Name Type Description Default <code>camera</code> <code>str</code> <p>The camera device label. By default, None. If not specified, the widget will use the current Camera device.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Whether to force a change away from tracking the default camera.</p> <code>False</code>"},{"location":"widgets/DefaultCameraExposureWidget/#example","title":"Example","text":"default_camera_exposure_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import DefaultCameraExposureWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nexp_wdg = DefaultCameraExposureWidget()\nexp_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/DeviceWidget/","title":"DeviceWidget","text":"This image generated from example code below."},{"location":"widgets/DeviceWidget/#pymmcore_widgets.DeviceWidget","title":"<code>DeviceWidget</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>A general Device Widget.</p> <p>Use <code>DeviceWidget.for_device('device_label')</code> method to create a device-type appropriate subclass.</p> <p>Note</p> <p>Currently, <code>DeviceWidget</code> only supports devices of type <code>StateDevice</code>. Calling <code>DeviceWidget.for_device(\"device_label\")</code>, will create the <code>DeviceWidget</code> subclass pymmcore_widgets.StateDeviceWidget.</p> <p>Parameters:</p> Name Type Description Default <code>device_label</code> <code>str</code> <p>A device label for which to create a widget.</p> required <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/DeviceWidget/#pymmcore_widgets._device_widget.DeviceWidget.deviceLabel","title":"<code>deviceLabel() -&gt; str</code>","text":"<p>Return device label.</p>"},{"location":"widgets/DeviceWidget/#pymmcore_widgets._device_widget.DeviceWidget.deviceName","title":"<code>deviceName() -&gt; str</code>","text":"<p>Return device name (this is not the device label).</p>"},{"location":"widgets/DeviceWidget/#pymmcore_widgets._device_widget.DeviceWidget.deviceType","title":"<code>deviceType() -&gt; DeviceType</code>","text":"<p>Return type of Device (<code>pymmcore_plus.DeviceType</code>).</p>"},{"location":"widgets/DeviceWidget/#pymmcore_widgets._device_widget.DeviceWidget.for_device","title":"<code>for_device(device_label: str) -&gt; DeviceWidget</code>  <code>classmethod</code>","text":"<p>Create a type-appropriate subclass for device with label <code>device_label</code>.</p> <p>Parameters:</p> Name Type Description Default <code>device_label</code> <code>str</code> <p>A deviceLabel for which to create a widget.</p> required <p>Returns:</p> Type Description <code>DeviceWidget</code> <p>Appropriate DeviceWidget subclass instance.</p>"},{"location":"widgets/DeviceWidget/#example","title":"Example","text":"device_widget.py<pre><code>\"\"\"Example usage of the DeviceWidget class.\n\nCurrently, 'DeviceWidget' only supports devices of type 'StateDevice'. Calling\n'DeviceWidget.for_device(\"device_label\"), will create the 'DeviceWidget' subclass\n'StateDeviceWidget'.\n\n'StateDeviceWidget(\"device_label\")' can be directly used to create a 'DeviceWidget'\nfor a devices of type 'StateDevice' (see also state_device_widget.py).\n\nIn this example all the devices of type 'StateDevice' that are loaded in micromanager\nare displayed with a 'DeviceWidget'.\n\"\"\"\n\n\nfrom pymmcore_plus import CMMCorePlus, DeviceType\nfrom qtpy.QtWidgets import QApplication, QFormLayout, QWidget\n\nfrom pymmcore_widgets import DeviceWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nwdg = QWidget()\nwdg.setLayout(QFormLayout())\n\nfor d in mmc.getLoadedDevicesOfType(DeviceType.StateDevice):\n    dev_wdg = DeviceWidget.for_device(d)\n    wdg.layout().addRow(f\"{d}:\", dev_wdg)\n\nwdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ExposureWidget/","title":"ExposureWidget","text":"This image generated from example code below."},{"location":"widgets/ExposureWidget/#pymmcore_widgets.ExposureWidget","title":"<code>ExposureWidget</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>A Widget to get/set exposure on a camera.</p> <p>Parameters:</p> Name Type Description Default <code>camera</code> <code>str</code> <p>The camera device label. By default, None. If not specified, the widget will use the current Camera device.</p> <code>None</code> <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance()</code>.</p> <code>None</code> <p>Examples:</p> <p>Combining <code>ExposureWidget</code> with other widgets</p> <p>see ImagePreview</p>"},{"location":"widgets/ExposureWidget/#pymmcore_widgets._exposure_widget.ExposureWidget.setCamera","title":"<code>setCamera(camera: str | None = None) -&gt; None</code>","text":"<p>Set which camera this widget tracks.</p> <p>Parameters:</p> Name Type Description Default <code>camera</code> <code>str</code> <p>The camera device label. By default, None. If not specified, the widget will use the current Camera device.</p> <code>None</code>"},{"location":"widgets/ExposureWidget/#example","title":"Example","text":"exposure_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ExposureWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nexp_wdg = ExposureWidget()\nexp_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/GridWidget/","title":"GridWidget","text":"This image generated from example code below."},{"location":"widgets/GridWidget/#pymmcore_widgets.GridWidget","title":"<code>GridWidget</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>A subwidget to setup the acquisition of a grid of images.</p> <p>The <code>value()</code> method returns a dictionary with the current state of the widget, in a format that matches one of the useq-schema Grid Plan specifications.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget, by default None.</p> <code>None</code> <code>current_stage_pos</code> <code>tuple[float | None, float | None]</code> <p>Optional current stage position. By default None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/GridWidget/#pymmcore_widgets._mda._grid_widget.GridWidget.set_state","title":"<code>set_state(grid: dict | AnyGridPlan) -&gt; None</code>","text":"<p>Set the state of the widget from a useq AnyGridPlan or dictionary.</p>"},{"location":"widgets/GridWidget/#pymmcore_widgets._mda._grid_widget.GridWidget.value","title":"<code>value() -&gt; dict</code>","text":"<p>Return the current GridPlan settings.</p> <p>Note that output dict will match the Channel from useq schema: https://pymmcore-plus.github.io/useq-schema/schema/axes/#grid-plans</p>"},{"location":"widgets/GridWidget/#example","title":"Example","text":"grid_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import GridWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\ngrid_wdg = GridWidget()\ngrid_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/GroupPresetTableWidget/","title":"GroupPresetTableWidget","text":"This image generated from example code below."},{"location":"widgets/GroupPresetTableWidget/#pymmcore_widgets.GroupPresetTableWidget","title":"<code>GroupPresetTableWidget</code>","text":"<p>             Bases: <code>QGroupBox</code></p> <p>A Widget to create, edit, delete and set micromanager group presets.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance()</code>.</p> <code>None</code>"},{"location":"widgets/GroupPresetTableWidget/#example","title":"Example","text":"group_preset_table_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import GroupPresetTableWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\ngroup_preset_wdg = GroupPresetTableWidget()\ngroup_preset_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ImagePreview/","title":"ImagePreview","text":"This image generated from example code below."},{"location":"widgets/ImagePreview/#pymmcore_widgets.ImagePreview","title":"<code>ImagePreview</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>A Widget that displays the last image snapped by active core.</p> <p>This widget will automatically update when the active core snaps an image or when the active core starts streaming.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/ImagePreview/#pymmcore_widgets._image_widget.ImagePreview.clims","title":"<code>clims: tuple[float, float] | Literal['auto']</code>  <code>property</code> <code>writable</code>","text":"<p>Get the contrast limits of the image.</p>"},{"location":"widgets/ImagePreview/#pymmcore_widgets._image_widget.ImagePreview.cmap","title":"<code>cmap: str</code>  <code>property</code> <code>writable</code>","text":"<p>Get the colormap (lookup table) of the image.</p>"},{"location":"widgets/ImagePreview/#example","title":"Example","text":"image_preview.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication, QGroupBox, QHBoxLayout, QVBoxLayout, QWidget\n\nfrom pymmcore_widgets import (\n    ChannelWidget,\n    ExposureWidget,\n    ImagePreview,\n    LiveButton,\n    SnapButton,\n)\n\n\nclass ImageFrame(QWidget):\n\"\"\"An example widget with a snap/live button and an image preview.\"\"\"\n\n    def __init__(self, parent: QWidget | None = None) -&gt; None:\n        super().__init__(parent)\n\n        self.preview = ImagePreview()\n        self.snap_button = SnapButton()\n        self.live_button = LiveButton()\n        self.exposure = ExposureWidget()\n        self.channel = ChannelWidget()\n\n        self.setLayout(QVBoxLayout())\n\n        buttons = QGroupBox()\n        buttons.setLayout(QHBoxLayout())\n        buttons.layout().addWidget(self.snap_button)\n        buttons.layout().addWidget(self.live_button)\n\n        ch_exp = QWidget()\n        layout = QHBoxLayout()\n        layout.setContentsMargins(0, 0, 0, 0)\n        ch_exp.setLayout(layout)\n\n        ch = QGroupBox()\n        ch.setTitle(\"Channel\")\n        ch.setLayout(QHBoxLayout())\n        ch.layout().setContentsMargins(0, 0, 0, 0)\n        ch.layout().addWidget(self.channel)\n        layout.addWidget(ch)\n\n        exp = QGroupBox()\n        exp.setTitle(\"Exposure\")\n        exp.setLayout(QHBoxLayout())\n        exp.layout().setContentsMargins(0, 0, 0, 0)\n        exp.layout().addWidget(self.exposure)\n        layout.addWidget(exp)\n\n        self.layout().addWidget(self.preview)\n        self.layout().addWidget(ch_exp)\n        self.layout().addWidget(buttons)\n\n\nif __name__ == \"__main__\":\n    mmc = CMMCorePlus().instance()\n    mmc.loadSystemConfiguration()\n    app = QApplication([])\n    frame = ImageFrame()\n    frame.show()\n    mmc.snap()\n    app.exec_()\n</code></pre>"},{"location":"widgets/LiveButton/","title":"LiveButton","text":"This image generated from example code below."},{"location":"widgets/LiveButton/#pymmcore_widgets.LiveButton","title":"<code>LiveButton</code>","text":"<p>             Bases: <code>QPushButton</code></p> <p>A Widget to create a two-state (on-off) live mode QPushButton.</p> <p>When pressed, a 'ContinuousSequenceAcquisition' is started or stopped and a pymmcore-plus signal <code>continuousSequenceAcquisitionStarted</code> or <code>sequenceAcquisitionStopped</code> is emitted.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code> <p>Examples:</p> <p>Combining <code>LiveButton</code> with other widgets</p> <p>see ImagePreview</p>"},{"location":"widgets/LiveButton/#pymmcore_widgets._live_button_widget.LiveButton.button_text_off","title":"<code>button_text_off: str</code>  <code>property</code> <code>writable</code>","text":"<p>Set the live button text for when live mode is off.</p> <p>Default = \"Stop.\"</p>"},{"location":"widgets/LiveButton/#pymmcore_widgets._live_button_widget.LiveButton.button_text_on","title":"<code>button_text_on: str</code>  <code>property</code> <code>writable</code>","text":"<p>Set the live button text for when live mode is on.</p> <p>Default = \"Live.\"</p>"},{"location":"widgets/LiveButton/#pymmcore_widgets._live_button_widget.LiveButton.icon_color_off","title":"<code>icon_color_off: COLOR_TYPE</code>  <code>property</code> <code>writable</code>","text":"<p>Set the live button color for when live mode is off.</p> <p>Default = \"magenta\".</p>"},{"location":"widgets/LiveButton/#pymmcore_widgets._live_button_widget.LiveButton.icon_color_on","title":"<code>icon_color_on: COLOR_TYPE</code>  <code>property</code> <code>writable</code>","text":"<p>Set the live button color for when live mode is on.</p> <p>Default = (0. 255, 0).</p>"},{"location":"widgets/LiveButton/#example","title":"Example","text":"live_button.py<pre><code>\"\"\"Example usage of the LiveButton class.\n\nCheck also the 'image_widget.py' example to see the LiveButton\nused in combination of other widgets.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import LiveButton\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nlive_btn = LiveButton()\nlive_btn.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/MDAWidget/","title":"MDAWidget","text":"This image generated from example code below."},{"location":"widgets/MDAWidget/#pymmcore_widgets.MDAWidget","title":"<code>MDAWidget</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>A Multi-dimensional acquisition Widget.</p> <p>The <code>MDAWidget</code> provides a GUI to construct a <code>useq.MDASequence</code> object. If the <code>include_run_button</code> parameter is set to <code>True</code>, a \"run\" button is added to the GUI and, when clicked, the generated <code>useq.MDASequence</code> is passed to the <code>CMMCorePlus.instance</code> method and the acquisition is executed.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget, by default None.</p> <code>None</code> <code>include_run_button</code> <code>bool</code> <p>By default, <code>False</code>. If <code>True</code>, a \"run\" button is added to the widget. The acquisition defined by the <code>useq.MDASequence</code> built through the widget is executed when clicked.</p> <code>False</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/MDAWidget/#pymmcore_widgets._mda._mda_widget.MDAWidget.get_state","title":"<code>get_state() -&gt; MDASequence</code>","text":"<p>Get current state of widget and build a useq.MDASequence.</p> <p>Returns:</p> Type Description <code>useq.MDASequence</code>"},{"location":"widgets/MDAWidget/#pymmcore_widgets._mda._mda_widget.MDAWidget.set_state","title":"<code>set_state(state: dict | MDASequence | str | Path) -&gt; None</code>","text":"<p>Set current state of MDA widget.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>dict | MDASequence | str | Path</code> <p>MDASequence state in the form of a dict, MDASequence object, or a str or Path pointing to a sequence.yaml file</p> required"},{"location":"widgets/MDAWidget/#example","title":"Example","text":"mda_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import (\n    QApplication,\n    QGroupBox,\n    QHBoxLayout,\n    QLabel,\n    QVBoxLayout,\n    QWidget,\n)\nfrom useq import MDAEvent, MDASequence\n\nfrom pymmcore_widgets import MDAWidget\n\n\nclass MDA(QWidget):\n\"\"\"An example of using the MDAWidget to create and acquire a useq.MDASequence.\n\n    The `MDAWidget` provides a GUI to construct a `useq.MDASequence` object.\n    This object describes a full multi-dimensional acquisition;\n\n    In this example, we set the `MDAWidget` parameter `include_run_button` to `True`,\n    meaning that a `run` button is added to the GUI. When pressed, a `useq.MDASequence`\n    is first built depending on the GUI values and is then passed to the\n    `CMMCorePlus.run_mda` to actually execute the acquisition.\n\n    For details of the corresponding schema and methods, see\n    https://github.com/pymmcore-plus/useq-schema and\n    https://github.com/pymmcore-plus/pymmcore-plus.\n\n    In this example, we've also connected callbacks to the CMMCorePlus object's `mda`\n    events to print out the current state of the acquisition.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        super().__init__()\n\n        # get the CMMCore instance and load the default config\n        self.mmc = CMMCorePlus.instance()\n        self.mmc.loadSystemConfiguration()\n\n        # connect MDA acquisition events to local callbacks\n        # in this example we're just printing the current state of the acquisition\n        self.mmc.mda.events.sequenceStarted.connect(self._on_start)\n        self.mmc.mda.events.frameReady.connect(self._on_frame)\n        self.mmc.mda.events.sequenceFinished.connect(self._on_end)\n        self.mmc.mda.events.sequencePauseToggled.connect(self._on_pause)\n\n        # instantiate the MDAWidget, and a couple lables for feedback\n        self.mda = MDAWidget(include_run_button=True)\n        self.current_sequence = QLabel('... enter info and click \"Run\"')\n        self.current_event = QLabel(\"... current event info will appear here\")\n\n        # below here is just GUI layout stuff\n        mda_wdg = QGroupBox()\n        mda_wdg.setMaximumWidth(600)\n        mda_wdg.setLayout(QVBoxLayout())\n        mda_wdg.layout().setContentsMargins(0, 0, 0, 0)\n        mda_wdg.layout().addWidget(self.mda)\n\n        lbl_wdg = QGroupBox()\n        lbl_wdg.setMinimumWidth(275)\n        lbl_wdg.setLayout(QVBoxLayout())\n        lbl_wdg.layout().addWidget(QLabel(text=\"&lt;h3&gt;ACQUISITION SEQUENCE&lt;/h3&gt;\"))\n        lbl_wdg.layout().addWidget(self.current_sequence)\n        lbl_wdg.layout().addWidget(QLabel(text=\"&lt;h3&gt;ACQUISITION EVENT&lt;/h3&gt;\"))\n        lbl_wdg.layout().addWidget(self.current_event)\n\n        self.setLayout(QHBoxLayout())\n        self.layout().addWidget(mda_wdg)\n        self.layout().addWidget(lbl_wdg)\n        self.resize(900, 800)\n\n    def _on_start(self, sequence: MDASequence) -&gt; None:\n\"\"\"Called when the MDA sequence starts.\"\"\"\n        self.current_sequence.setText(sequence.yaml())\n\n    def _on_frame(self, image, event: MDAEvent) -&gt; None:\n\"\"\"Called each time a frame is acquired.\"\"\"\n        self.current_event.setText(\n            f\"index: {event.index}\\n\"\n            f\"channel: {event.channel.config}\\n\"\n            f\"exposure: {event.exposure}\\n\"\n            f\"pos_name: {event.pos_name}\\n\"\n            f\"xyz: ({event.x_pos}, {event.y_pos}, {event.z_pos})\\n\"\n        )\n\n    def _on_end(self) -&gt; None:\n\"\"\"Called when the MDA sequence ends.\"\"\"\n        self.current_event.setText(\"Finished!\")\n\n    def _on_pause(self, state: bool) -&gt; None:\n\"\"\"Called when the MDA is paused.\"\"\"\n        txt = \"Paused...\" if state else \"Resumed!\"\n        self.current_event.setText(txt)\n\n\nif __name__ == \"__main__\":\n    app = QApplication([])\n    frame = MDA()\n    frame.show()\n    app.exec_()\n</code></pre>"},{"location":"widgets/ObjectivesWidget/","title":"ObjectivesWidget","text":"This image generated from example code below."},{"location":"widgets/ObjectivesWidget/#pymmcore_widgets.ObjectivesWidget","title":"<code>ObjectivesWidget</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>A QComboBox-based Widget to select the microscope objective.</p> <p>Parameters:</p> Name Type Description Default <code>objective_device</code> <code>str | None</code> <p>Device label for the micromanager objective device. By default, it will be guessed using the <code>CMMCorePlus.guessObjectiveDevices</code> method and a choice dialog will be presented if there are multiple options. This method looks for a micromanager device matching the default regex <code>re.compile(\"(.+)?(nosepiece|obj(ective)?)(turret)?s?\", re.IGNORECASE)</code>. To change the search pattern, set <code>CMMCorePlus.objective_device_pattern</code>.</p> <code>None</code> <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget, by default None</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/ObjectivesWidget/#example","title":"Example","text":"objectives_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ObjectivesWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nobj_wdg = ObjectivesWidget()\nobj_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/PixelSizeWidget/","title":"PixelSizeWidget","text":"This image generated from example code below."},{"location":"widgets/PixelSizeWidget/#pymmcore_widgets.PixelSizeWidget","title":"<code>PixelSizeWidget</code>","text":"<p>             Bases: <code>QDialog</code></p> <p>A widget for pixel size control.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget, by default None</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/PixelSizeWidget/#example","title":"Example","text":"pixel_size_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import PixelSizeWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\npx_wdg = PixelSizeWidget()\npx_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/PositionTable/","title":"PositionTable","text":"This image generated from example code below."},{"location":"widgets/PositionTable/#pymmcore_widgets.PositionTable","title":"<code>PositionTable</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>Widget providing options for setting up a multi-position acquisition.</p> <p>The <code>value()</code> method returns a dictionary with the current state of the widget, in a format that matches one of the useq-schema Position specifications.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget, by default None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/PositionTable/#pymmcore_widgets._mda._positions_table_widget.PositionTable.clear","title":"<code>clear() -&gt; None</code>","text":"<p>Clear all positions.</p>"},{"location":"widgets/PositionTable/#pymmcore_widgets._mda._positions_table_widget.PositionTable.set_state","title":"<code>set_state(positions: Sequence[PositionDict | Position], clear: bool = True) -&gt; None</code>","text":"<p>Set the state of the widget.</p> <p>Parameters:</p> Name Type Description Default <code>positions</code> <code>Sequence[PositionDict | Position]</code> <p>A sequence of positions based on the useq-schema Positions specifications.</p> required <code>clear</code> <code>bool</code> <p>By default True. If True, the current positions list is cleared before the specified one is added.</p> <code>True</code>"},{"location":"widgets/PositionTable/#pymmcore_widgets._mda._positions_table_widget.PositionTable.value","title":"<code>value() -&gt; list[PositionDict]</code>","text":"<p>Return the current positions settings as a list of dictionaries.</p> <p>Note that the output will match the useq-schema Positions specifications.</p>"},{"location":"widgets/PositionTable/#example","title":"Example","text":"position_table.py<pre><code>\"\"\"Example usage of the PositionTable class.\n\nCheck also the 'mda_widget.py' example to see the PositionTable\nused in combination of other widgets.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import PositionTable\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\npos_wdg = PositionTable()\npos_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/PresetsWidget/","title":"PresetsWidget","text":"This image generated from example code below."},{"location":"widgets/PresetsWidget/#pymmcore_widgets.PresetsWidget","title":"<code>PresetsWidget</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>A Widget to create a QCombobox containing the presets of the specified group.</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>str</code> <p>Group name.</p> required <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/PresetsWidget/#pymmcore_widgets._presets_widget.PresetsWidget.allowedValues","title":"<code>allowedValues() -&gt; tuple[str, ...]</code>","text":"<p>Return the allowed values for this widget.</p>"},{"location":"widgets/PresetsWidget/#pymmcore_widgets._presets_widget.PresetsWidget.setValue","title":"<code>setValue(value: str) -&gt; None</code>","text":"<p>Set the combobox to the given value.</p>"},{"location":"widgets/PresetsWidget/#pymmcore_widgets._presets_widget.PresetsWidget.value","title":"<code>value() -&gt; str</code>","text":"<p>Get current value.</p>"},{"location":"widgets/PresetsWidget/#example","title":"Example","text":"presets_widget.py<pre><code>\"\"\"Example Usage of the PresetsWidget class.\n\nIn this example all the available groups created in micromanager\nare displayed with a 'PresetsWidget'.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication, QFormLayout, QWidget\n\nfrom pymmcore_widgets import PresetsWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nwdg = QWidget()\nwdg.setLayout(QFormLayout())\n\nfor group in mmc.getAvailableConfigGroups():\n    gp_wdg = PresetsWidget(group)\n    wdg.layout().addRow(f\"{group}:\", gp_wdg)\n\nwdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/PropertiesWidget/","title":"PropertiesWidget","text":"This image generated from example code below."},{"location":"widgets/PropertiesWidget/#pymmcore_widgets.PropertiesWidget","title":"<code>PropertiesWidget</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>Convenience container to control a specific set of PropertyWidgets.</p> <p>Properties can be filtered by a number of criteria, which are passed to <code>CMMCorePlus.iterProperties</code>.</p> <p>Parameters:</p> Name Type Description Default <code>property_type</code> <code>int | Sequence[int] | None</code> <p>PropertyType (or types) to filter by, by default all property types will be yielded.</p> <code>None</code> <code>property_name_pattern</code> <code>str | re.Pattern | None</code> <p>Property name to filter by, by default all property names will be yielded. May be a compiled regular expression or a string, in which case it will be compiled with <code>re.IGNORECASE</code>.</p> <code>None</code> <code>device_type</code> <code>DeviceType | None</code> <p>DeviceType to filter by, by default all device types will be yielded.</p> <code>None</code> <code>device_label</code> <code>str | None</code> <p>Device label to filter by, by default all device labels will be yielded.</p> <code>None</code> <code>has_limits</code> <code>bool | None</code> <p>If provided, only properties with <code>hasPropertyLimits</code> matching this value will be yielded.</p> <code>None</code> <code>is_read_only</code> <code>bool | None</code> <p>If provided, only properties with <code>isPropertyReadOnly</code> matching this value will be yielded.</p> <code>None</code> <code>is_sequenceable</code> <code>bool | None</code> <p>If provided only properties with <code>isPropertySequenceable</code> matching this value will be yielded.</p> <code>None</code>"},{"location":"widgets/PropertiesWidget/#pymmcore_widgets._properties_widget.PropertiesWidget.rebuild","title":"<code>rebuild() -&gt; None</code>","text":"<p>Rebuild the layout, populating based on current filters.</p>"},{"location":"widgets/PropertiesWidget/#example","title":"Example","text":"properties_widget.py<pre><code>\"\"\"The PropertiesWidget is a container for a set of PropertyWidgets.\n\nIt creates widgets for a set of different properties, filtered based on\nthe arguments to the constructor.\n\"\"\"\nfrom pymmcore_plus import CMMCorePlus, PropertyType\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import PropertiesWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nwdg = PropertiesWidget(\n    # regex pattern to match property names\n    property_name_pattern=\"test\",\n    property_type={PropertyType.Float},\n    has_limits=True,\n)\n\nwdg.show()\napp.exec_()\n</code></pre>"},{"location":"widgets/PropertyBrowser/","title":"PropertyBrowser","text":"This image generated from example code below."},{"location":"widgets/PropertyBrowser/#pymmcore_widgets.PropertyBrowser","title":"<code>PropertyBrowser</code>","text":"<p>             Bases: <code>QDialog</code></p> <p>A Widget to browse and change properties of all devices.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/PropertyBrowser/#example","title":"Example","text":"property_browser.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import PropertyBrowser\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\npb_wdg = PropertyBrowser()\npb_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/PropertyWidget/","title":"PropertyWidget","text":"This image generated from example code below."},{"location":"widgets/PropertyWidget/#pymmcore_widgets.PropertyWidget","title":"<code>PropertyWidget</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>A widget to display and control a specified mmcore device property.</p> <p>Parameters:</p> Name Type Description Default <code>device_label</code> <code>str</code> <p>Device label</p> required <code>prop_name</code> <code>str</code> <p>Property name</p> required <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the <code>device_label</code> is not loaded, or does not have a property <code>prop_name</code>.</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets._property_widget.PropertyWidget.allowedValues","title":"<code>allowedValues() -&gt; tuple[str, ...]</code>","text":"<p>Return tuple of allowable values if property is categorical.</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets._property_widget.PropertyWidget.connectCore","title":"<code>connectCore(mmcore: CMMCorePlus | None = None) -&gt; None</code>","text":"<p>Connect to core.</p> <p>Connect the widget to the core. This is the default state.</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets._property_widget.PropertyWidget.deviceType","title":"<code>deviceType() -&gt; DeviceType</code>","text":"<p>Return property type.</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets._property_widget.PropertyWidget.disconnectCore","title":"<code>disconnectCore() -&gt; None</code>","text":"<p>Disconnect from core.</p> <p>Disconnect the widget from the core. This will prevent the widget from updating the core when the value changes.</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets._property_widget.PropertyWidget.isReadOnly","title":"<code>isReadOnly() -&gt; bool</code>","text":"<p>Return True if property is read only.</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets._property_widget.PropertyWidget.propertyType","title":"<code>propertyType() -&gt; PropertyType</code>","text":"<p>Return property type.</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets._property_widget.PropertyWidget.refresh","title":"<code>refresh() -&gt; None</code>","text":"<p>Update the value of the widget from mmcore.</p> <p>(If all goes well this shouldn't be necessary, but if a propertyChanged event is missed, this can be used).</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets._property_widget.PropertyWidget.setValue","title":"<code>setValue(value: Any) -&gt; None</code>","text":"<p>Set the current value of the widget (which should match mmcore).</p>"},{"location":"widgets/PropertyWidget/#pymmcore_widgets._property_widget.PropertyWidget.value","title":"<code>value() -&gt; Any</code>","text":"<p>Get value.</p> <p>Return the current value of the widget (which should match mmcore).</p>"},{"location":"widgets/PropertyWidget/#example","title":"Example","text":"property_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication, QFormLayout, QWidget\n\nfrom pymmcore_widgets import PropertyWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nwdg = QWidget()\nwdg.setLayout(QFormLayout())\n\ndevs_pros = [\n    (\"Camera\", \"AllowMultiROI\"),\n    (\"Camera\", \"Binning\"),\n    (\"Camera\", \"CCDTemperature\"),\n]\n\nfor dev, prop in devs_pros:\n    prop_wdg = PropertyWidget(dev, prop)\n    wdg.layout().addRow(f\"{dev}-{prop}:\", prop_wdg)\n\nwdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ShuttersWidget/","title":"ShuttersWidget","text":"This image generated from example code below."},{"location":"widgets/ShuttersWidget/#pymmcore_widgets.ShuttersWidget","title":"<code>ShuttersWidget</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>A Widget for shutters and Micro-Manager autoshutter.</p> <p>Parameters:</p> Name Type Description Default <code>shutter_device</code> <code>str</code> <p>The shutter device Label.</p> required <code>autoshutter</code> <code>bool</code> <p>If True, a checkbox controlling the Micro-Manager autoshutter is added to the layout.</p> <code>True</code> <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget. By default, None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/ShuttersWidget/#pymmcore_widgets._shutter_widget.ShuttersWidget.button_text_closed","title":"<code>button_text_closed: str</code>  <code>property</code> <code>writable</code>","text":"<p>Set the button text for when the shutter is closed.</p> <p>Default = ''</p>"},{"location":"widgets/ShuttersWidget/#pymmcore_widgets._shutter_widget.ShuttersWidget.button_text_open","title":"<code>button_text_open: str</code>  <code>property</code> <code>writable</code>","text":"<p>Set the button text for when the shutter is open.</p> <p>Default = ''</p>"},{"location":"widgets/ShuttersWidget/#pymmcore_widgets._shutter_widget.ShuttersWidget.icon_closed","title":"<code>icon_closed: str</code>  <code>property</code> <code>writable</code>","text":"<p>Set the icon of the QPushButton when the shutter is closed.</p> <p>The icon_closed.setter icon string should be any key recognizeable as a superqt fonticon (e.g. mdi6.abacus). Default = MDI6.hexagon_slice_6 (https://github.com/templarian/MaterialDesign). Note that MDI6 is installed by default, you must install other fonts if you want to use them.</p>"},{"location":"widgets/ShuttersWidget/#pymmcore_widgets._shutter_widget.ShuttersWidget.icon_color_closed","title":"<code>icon_color_closed: COLOR_TYPE</code>  <code>property</code> <code>writable</code>","text":"<p>Set the button icon color for when the shutter is closed.</p> <p>Default = 'magenta'</p> <p>COLOR_TYPE = Union[QColor, int, str, Qt.GlobalColor, tuple[int, int, int, int], tuple[int, int, int]]</p>"},{"location":"widgets/ShuttersWidget/#pymmcore_widgets._shutter_widget.ShuttersWidget.icon_color_open","title":"<code>icon_color_open: COLOR_TYPE</code>  <code>property</code> <code>writable</code>","text":"<p>Set the button icon color for when the shutter is open.</p> <p>Default = (0, 255, 0)</p> <p>COLOR_TYPE = Union[QColor, int, str, Qt.GlobalColor, tuple[int, int, int, int], tuple[int, int, int]]</p>"},{"location":"widgets/ShuttersWidget/#pymmcore_widgets._shutter_widget.ShuttersWidget.icon_open","title":"<code>icon_open: str</code>  <code>property</code> <code>writable</code>","text":"<p>Set the icon of the QPushButton when the shutter is open.</p> <p>The icon_open.setter icon string should be any key recognizeable as a superqt fonticon (e.g. mdi6.abacus). Default = MDI6.hexagon_outline (https://github.com/templarian/MaterialDesign). Note that MDI6 is installed by default, you must install other fonts if you want to use them.</p>"},{"location":"widgets/ShuttersWidget/#pymmcore_widgets._shutter_widget.ShuttersWidget.icon_size","title":"<code>icon_size: int</code>  <code>property</code> <code>writable</code>","text":"<p>Set the button icon size.</p> <p>Default = 25</p>"},{"location":"widgets/ShuttersWidget/#example","title":"Example","text":"shutters_widget.py<pre><code>from pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ShuttersWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nshutter = ShuttersWidget(\"White Light Shutter\")\nshutter.button_text_open = \"White Light Shutter\"\nshutter.button_text_closed = \"White Light Shutter\"\nshutter.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/SnapButton/","title":"SnapButton","text":"This image generated from example code below."},{"location":"widgets/SnapButton/#pymmcore_widgets.SnapButton","title":"<code>SnapButton</code>","text":"<p>             Bases: <code>QPushButton</code></p> <p>Create a snap QPushButton.</p> <p>This button is linked to the <code>CMMCorePlus.snap</code> method. Once the button is clicked, an image is acquired and the <code>pymmcore-plus</code> signal <code>imageSnapped</code> is emitted.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code> <p>Examples:</p> <p>Combining <code>SnapButton</code> with other widgets</p> <p>see ImagePreview</p>"},{"location":"widgets/SnapButton/#example","title":"Example","text":"snap_button.py<pre><code>\"\"\"Example usage of the SnapButton class.\n\nCheck also the 'image_widget.py' example to see the SnapButton\nused in combination of other widgets.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import SnapButton\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nsnap_btn = SnapButton()\nsnap_btn.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/StageWidget/","title":"StageWidget","text":"This image generated from example code below."},{"location":"widgets/StageWidget/#pymmcore_widgets.StageWidget","title":"<code>StageWidget</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>A Widget to control a XY and/or a Z stage.</p> <p>Parameters:</p> Name Type Description Default <code>device</code> <code>str</code> <p>Stage device.</p> required <code>levels</code> <code>int | None</code> <p>Number of \"arrow\" buttons per widget per direction, by default, 2.</p> <code>2</code> <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/StageWidget/#example","title":"Example","text":"stage_widget.py<pre><code>\"\"\"Example usage of the StageWidget class.\n\nIn this example all the devices of type 'Stage' and 'XYStage' that are loaded\nin micromanager are displayed with a 'StageWidget'.\n\"\"\"\n\n\nfrom pymmcore_plus import CMMCorePlus, DeviceType\nfrom qtpy.QtWidgets import QApplication, QGroupBox, QHBoxLayout, QWidget\n\nfrom pymmcore_widgets import StageWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nwdg = QWidget()\nwdg.setLayout(QHBoxLayout())\n\nstage_dev_list = list(mmc.getLoadedDevicesOfType(DeviceType.XYStage))\nstage_dev_list.extend(iter(mmc.getLoadedDevicesOfType(DeviceType.Stage)))\n\nfor stage_dev in stage_dev_list:\n    if mmc.getDeviceType(stage_dev) is DeviceType.XYStage:\n        bx = QGroupBox(\"XY Control\")\n        bx.setLayout(QHBoxLayout())\n        bx.layout().addWidget(StageWidget(device=stage_dev))\n        wdg.layout().addWidget(bx)\n    if mmc.getDeviceType(stage_dev) is DeviceType.Stage:\n        bx = QGroupBox(\"Z Control\")\n        bx.setLayout(QHBoxLayout())\n        bx.layout().addWidget(StageWidget(device=stage_dev))\n        wdg.layout().addWidget(bx)\n\nwdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/StateDeviceWidget/","title":"StateDeviceWidget","text":"This image generated from example code below."},{"location":"widgets/StateDeviceWidget/#pymmcore_widgets.StateDeviceWidget","title":"<code>StateDeviceWidget</code>","text":"<p>             Bases: <code>DeviceWidget</code></p> <p>A Widget with a QComboBox to control the states of a StateDevice.</p> <p>Parameters:</p> Name Type Description Default <code>device_label</code> <code>str</code> <p>A device label for which to create a widget.</p> required <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/StateDeviceWidget/#pymmcore_widgets._device_widget.StateDeviceWidget.state","title":"<code>state() -&gt; int</code>","text":"<p>Return current state (index) of the device.</p>"},{"location":"widgets/StateDeviceWidget/#pymmcore_widgets._device_widget.StateDeviceWidget.stateLabel","title":"<code>stateLabel() -&gt; str</code>","text":"<p>Return current state (label) of the device.</p>"},{"location":"widgets/StateDeviceWidget/#pymmcore_widgets._device_widget.StateDeviceWidget.stateLabels","title":"<code>stateLabels() -&gt; tuple[str]</code>","text":"<p>Return all state labels of the device.</p>"},{"location":"widgets/StateDeviceWidget/#example","title":"Example","text":"state_device_widget.py<pre><code>\"\"\"Example usage of the StateDeviceWidget class.\n\nIn this example all the devices of type 'StateDevice' that are loaded in micromanager\nare displayed with a 'StateDeviceWidget'.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus, DeviceType\nfrom qtpy.QtWidgets import QApplication, QFormLayout, QWidget\n\nfrom pymmcore_widgets import StateDeviceWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nwdg = QWidget()\nwdg.setLayout(QFormLayout())\n\nfor d in mmc.getLoadedDevicesOfType(DeviceType.StateDevice):\n    state_dev_wdg = StateDeviceWidget(d)\n    wdg.layout().addRow(f\"{d}:\", state_dev_wdg)\n\nwdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/TimePlanWidget/","title":"TimePlanWidget","text":"This image generated from example code below."},{"location":"widgets/TimePlanWidget/#pymmcore_widgets.TimePlanWidget","title":"<code>TimePlanWidget</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>Widget providing options for setting up a timelapse acquisition.</p> <p>The <code>value()</code> method returns a dictionary with the current state of the widget, in a format that matches one of the useq-schema MultiPhaseTimePlan specifications.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget, by default None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/TimePlanWidget/#pymmcore_widgets._mda._time_plan_widget.TimePlanWidget.setWarningIcon","title":"<code>setWarningIcon(icon: str | QIcon) -&gt; None</code>","text":"<p>Set the icon of the warning message.</p>"},{"location":"widgets/TimePlanWidget/#pymmcore_widgets._mda._time_plan_widget.TimePlanWidget.setWarningMessage","title":"<code>setWarningMessage(msg: str) -&gt; None</code>","text":"<p>Set the text of the warning message.</p>"},{"location":"widgets/TimePlanWidget/#pymmcore_widgets._mda._time_plan_widget.TimePlanWidget.setWarningVisible","title":"<code>setWarningVisible(visible: bool = True) -&gt; None</code>","text":"<p>Set the visibility of the warning message.</p>"},{"location":"widgets/TimePlanWidget/#pymmcore_widgets._mda._time_plan_widget.TimePlanWidget.set_state","title":"<code>set_state(t_plan: dict) -&gt; None</code>","text":"<p>Set the state of the widget.</p> <p>Parameters:</p> Name Type Description Default <code>t_plan</code> <code>dict</code> <p>A dictionary following the useq-schema TIntervalLoopsdictionary specifications or the useq-schema MultiPhaseTimePlan TIntervalLoopsdictionary specifications.</p> <p>If the TIntervalLoopsdictionary <code>interval</code> key is not a <code>timedelta</code> object, it will be converted to a timedelta object and will be considered as expressed in seconds.</p> required"},{"location":"widgets/TimePlanWidget/#pymmcore_widgets._mda._time_plan_widget.TimePlanWidget.value","title":"<code>value() -&gt; MultiPhaseTimeDict</code>","text":"<p>Return the current time plan as a dictionary.</p> <p>Note that the output will match the useq-schema MultiPhaseTimePlan specifications.</p>"},{"location":"widgets/TimePlanWidget/#example","title":"Example","text":"time_plan_widget.py<pre><code>\"\"\"Example usage of the TimePlanWidget class.\n\nCheck also the 'mda_widget.py' example to see the TimePlanWidget\nused in combination of other widgets.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import TimePlanWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nt_wdg = TimePlanWidget()\nt_wdg.show()\n\napp.exec_()\n</code></pre>"},{"location":"widgets/ZStackWidget/","title":"ZStackWidget","text":"This image generated from example code below."},{"location":"widgets/ZStackWidget/#pymmcore_widgets.ZStackWidget","title":"<code>ZStackWidget</code>","text":"<p>             Bases: <code>QWidget</code></p> <p>Widget providing options for setting up a z-stack range and step size.</p> <p>Each tab represents a different way of specifying a z-stack range. The <code>value()</code> method returns a dictionary with the current state of the widget, in a format that matches one of the useq-schema Z Plan specifications.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>QWidget | None</code> <p>Optional parent widget, by default None.</p> <code>None</code> <code>mmcore</code> <code>CMMCorePlus | None</code> <p>Optional <code>pymmcore_plus.CMMCorePlus</code> micromanager core. By default, None. If not specified, the widget will use the active (or create a new) <code>CMMCorePlus.instance</code>.</p> <code>None</code>"},{"location":"widgets/ZStackWidget/#pymmcore_widgets._mda._zstack_widget.ZStackWidget.n_images","title":"<code>n_images() -&gt; int</code>","text":"<p>Return the current number of images in the z-stack.</p>"},{"location":"widgets/ZStackWidget/#pymmcore_widgets._mda._zstack_widget.ZStackWidget.set_state","title":"<code>set_state(z_plan: dict) -&gt; None</code>","text":"<p>Set the state of the widget.</p> <p>Parameters:</p> Name Type Description Default <code>z_plan</code> <code>dict</code> <p>A dictionary following the useq-schema Z Plan specifications.</p> required"},{"location":"widgets/ZStackWidget/#pymmcore_widgets._mda._zstack_widget.ZStackWidget.value","title":"<code>value() -&gt; dict</code>","text":"<p>Return the current z-stack settings as a dictionary.</p> <p>Note that the output will match one of the useq-schema Z Plan specifications.</p>"},{"location":"widgets/ZStackWidget/#example","title":"Example","text":"z_stack_widget.py<pre><code>\"\"\"Example usage of the ZStackWidget class.\n\nCheck also the 'mda_widget.py' example to see the ZStackWidget\nused in combination of other widgets.\n\"\"\"\n\nfrom pymmcore_plus import CMMCorePlus\nfrom qtpy.QtWidgets import QApplication\n\nfrom pymmcore_widgets import ZStackWidget\n\napp = QApplication([])\n\nmmc = CMMCorePlus().instance()\nmmc.loadSystemConfiguration()\n\nz_wdg = ZStackWidget()\nz_wdg.show()\n\napp.exec_()\n</code></pre>"}]}